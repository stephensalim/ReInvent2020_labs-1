#--------------------------------------------------------------
# Parameters and Mappings
#
#--------------------------------------------------------------
Parameters: 
  ValidRegionParameter: 
    Type: String
    Default: ap-southeast-2
    AllowedValues: 
      - ap-southeast-2
    Description: Enter the desired region for the stack to be deployed into.   

  InstanceType:
    Description: Webserver EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: Must be a valid EC2 type
  
  ValidRegionParameter: 
    Type: String
    Default: ap-southeast-2
    AllowedValues: 
      - ap-southeast-2
    Description: Enter the desired region for the stack to be deployed into.   
   
  KeyName:
    Description: The EC2 keypair used to allow SSH to the resources.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: This must be an existing EC2 keypair.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    ConstraintDescription: Must be a valid IP CIDR range in the form x.x.x.x/x

Mappings:
  AWSInstanceType2Arch:
    t2.micro: 
      Arch: HVM64
  
  AWSRegionArch2AMI:
    ap-southeast-2:
      HVM64: ami-09b42976632b27e9b
      HVMG2: ami-0a9ce9fecc3d1daf8
Resources:
#------------------------------------------------------------
#
# Create a VPC with a public and private subnet
#
#------------------------------------------------------------
  Pattern3VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.31.0.0/16
      Tags:
      - Key: ResourceType
        Value: "ReInvent2020-SecurityTheWellArchitectedWay-Patten3"
  
  Pattern3PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Pattern3VPC
      AvailabilityZone: ap-southeast-2a
      CidrBlock: 172.31.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref Pattern3VPC, "PublicSubnet1"]]
      - Key: ResourceType
        Value: "ReInvent2020-SecurityTheWellArchitectedWay-Patten3"
  
  Pattern3PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Pattern3VPC
      AvailabilityZone: ap-southeast-2b
      CidrBlock: 172.31.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref Pattern3VPC, "PublicSubnet2"]]
      - Key: ResourceType
        Value: "ReInvent2020-SecurityTheWellArchitectedWay-Patten3"

  Pattern3PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Pattern3VPC
      AvailabilityZone: ap-southeast-2a
      CidrBlock: 172.31.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref Pattern3VPC, "PrivateSubnet1"]]
      - Key: ResourceType
        Value: "ReInvent2020-SecurityTheWellArchitectedWay-Patten3"

  Pattern3PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Pattern3VPC
      AvailabilityZone: ap-southeast-2b
      CidrBlock: 172.31.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref Pattern3VPC, "PrivateSubnet2"]]
      - Key: ResourceType
        Value: "ReInvent2020-SecurityTheWellArchitectedWay-Patten3"
#-------------------------------------------------------------
#
# Create an IGW and attach to the created VPC
# Create a NAT GW with an associated public IP address.
#
#------------------------------------------------------------- 
  Pattern3IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref Pattern3VPC, "igw"]]
      - Key: ResourceType
        Value: "ReInvent2020-SecurityTheWellArchitectedWay-Patten3"

  Pattern3IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Pattern3VPC
      InternetGatewayId: !Ref Pattern3IGW
  
  Pattern3NatGateway:
    Type: "AWS::EC2::NatGateway"
    DependsOn: Pattern3NatPublicIP
    Properties: 
      AllocationId: !GetAtt Pattern3NatPublicIP.AllocationId
      SubnetId: !Ref Pattern3PublicSubnet1
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref Pattern3VPC, "nat"]]
      - Key: ResourceType
        Value: "ReInvent2020-SecurityTheWellArchitectedWay-Patten3"

  Pattern3NatPublicIP:
    Type: "AWS::EC2::EIP"
    DependsOn: Pattern3VPC
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref Pattern3VPC, "NatPublicIP"]]
      - Key: ResourceType
        Value: "ReInvent2020-SecurityTheWellArchitectedWay-Patten3"
      
#-------------------------------------------------------------
#
# Create public route table and attach to the public subnets
#
#-------------------------------------------------------------
  Pattern3PublicRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Pattern3VPC
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Join [ "-", [ !Ref Pattern3VPC, "PublicRouteTable1"]]
        - Key: ResourceType
          Value: "ReInvent2020-SecurityTheWellArchitectedWay-Patten3"
  
  Pattern3PublicRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Pattern3VPC
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Join [ "-", [ !Ref Pattern3VPC, "PublicRouteTable2"]]
        - Key: ResourceType
          Value: "ReInvent2020-SecurityTheWellArchitectedWay-Patten3"
  
  Pattern3PublicRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: Pattern3IGW
    Properties:
      RouteTableId: !Ref Pattern3PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Pattern3IGW

  Pattern3PublicRoute2:
    Type: 'AWS::EC2::Route'
    DependsOn: Pattern3IGW
    Properties:
      RouteTableId: !Ref Pattern3PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Pattern3IGW
  
  Pattern3PublicSubnet1RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Pattern3PublicSubnet1
      RouteTableId: !Ref Pattern3PublicRouteTable1

  Pattern3PublicSubnet1RouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Pattern3PublicSubnet2
      RouteTableId: !Ref Pattern3PublicRouteTable2

#-------------------------------------------------------------
#
# Create public route table and attach to the public subnets
#
#-------------------------------------------------------------

  Pattern3PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Pattern3VPC
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Join [ "-", [ !Ref Pattern3VPC, "PrivateRouteTable1"]]
        - Key: ResourceType
          Value: "ReInvent2020-SecurityTheWellArchitectedWay-Patten3"
  
  Pattern3PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Pattern3VPC
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Join [ "-", [ !Ref Pattern3VPC, "PrivateRouteTable2"]]
        - Key: ResourceType
          Value: "ReInvent2020-SecurityTheWellArchitectedWay-Patten3"

  Pattern3PrivateRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: Pattern3IGW
    Properties:
      RouteTableId: !Ref Pattern3PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Pattern3NatGateway

  Pattern3PrivateRoute2:
    Type: 'AWS::EC2::Route'
    DependsOn: Pattern3IGW
    Properties:
      RouteTableId: !Ref Pattern3PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Pattern3NatGateway

  Pattern3PrivateSubnet1RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Pattern3PrivateSubnet1
      RouteTableId: !Ref Pattern3PrivateRouteTable1

  Pattern3PrivateSubnet1RouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Pattern3PrivateSubnet2
      RouteTableId: !Ref Pattern3PrivateRouteTable2
#----------------------------------------------------------------------------------------
# Build load balancer.
#
#----------------------------------------------------------------------------------------
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      #AvailabilityZones: !GetAZs ''
      Subnets: 
        - !Ref Pattern3PrivateSubnet1
        - !Ref Pattern3PrivateSubnet2
      CrossZone: true
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
#----------------------------------------------------------------------------------------
# Build instance security group.
#
#----------------------------------------------------------------------------------------
  Pattern3InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupOwnerId: !GetAtt [ElasticLoadBalancer, SourceSecurityGroup.OwnerAlias]
        SourceSecurityGroupName: !GetAtt [ElasticLoadBalancer, SourceSecurityGroup.GroupName]

#----------------------------------------------------------------------------------------
# Build autoscaling launch config and .
#
#----------------------------------------------------------------------------------------       

  Pattern3LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join ['

                  ', ['<h1>Congratulations, you have successfully launched
                    the AWS CloudFormation sample.</h1>']]
              mode: '000644'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Join ['', ['[main]

                    ', stack=, !Ref 'AWS::StackId', '

                    ', region=, !Ref 'AWS::Region', '

                    ']]
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join ['', ['[cfn-auto-reloader-hook]

                    ', 'triggers=post.update

                    ', 'path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init

                    ', 'action=/opt/aws/bin/cfn-init -v ', '         --stack ', !Ref 'AWS::StackName',
                  '         --resource LaunchConfig ', '         --region ', !Ref 'AWS::Region',
                  '

                    ', 'runas=root

                    ']]
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
              cfn-hup:
                enabled: true
                ensureRunning: true
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
    Properties:
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      SecurityGroups: [!Ref 'Pattern3InstanceSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      UserData: !Base64
        Fn::Join:
        - ''
        - ['#!/bin/bash -xe

            ', 'yum update -y aws-cfn-bootstrap

            ', '/opt/aws/bin/cfn-init -v ', '         --stack ', !Ref 'AWS::StackName',
          '         --resource LaunchConfig ', '         --region ', !Ref 'AWS::Region',
          '

            ', '/opt/aws/bin/cfn-signal -e $? ', '         --stack ', !Ref 'AWS::StackName',
          '         --resource WebServerGroup ', '         --region ', !Ref 'AWS::Region',
          '

            ']

